<?php
namespace ZohoBooksAL\Tests\Persister;
use ZohoBooksAL\Hydrator\EntityHydrator;
use ZohoBooksAL\Persister\BasicEntityPersister;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2016-03-23 at 22:09:10.
 */
class BasicEntityPersisterTest extends \PHPUnit_Framework_TestCase
{
    /**
     * @var \PHPUnit_Framework_MockObject_MockObject
     */
    protected $mapperMock,
              $classMetadataMock,
              $factoryMock,
              $entityTrackerMock,
              $entityMock,
              $hydratorMock;

    /**
     * @var BasicEntityPersister
     */
    protected $basicEntityPersister;

    protected $testCollectionPath = 'testCollectionPath';
    protected $testCollectionItemName = 'testCollectionItemName';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp()
    {
        $this->mapperMock = $this->getMockBuilder('ZohoBooksAL\Mapper\MapperInterface')
                                 ->disableOriginalConstructor()
                                 ->getMock();
        $this->classMetadataMock = $this->getMockBuilder('ZohoBooksAL\Metadata\ClassMetadata')
                                        ->disableOriginalConstructor()
                                        ->getMock();

        $this->factoryMock = $this->getMockBuilder('DI\FactoryInterface')
                                  ->disableOriginalConstructor()
                                  ->getMock();

        $this->entityTrackerMock = $this->getMockBuilder('ZohoBooksAL\Persister\PersistedEntityTracker')
                                        ->disableOriginalConstructor()
                                        ->getMock();

        $this->entityMock = $this->getMockBuilder('ZohoBooksAL\Entity\EntityInterface')
                                 ->disableOriginalConstructor()
                                 ->getMock();

        $this->hydratorMock = $this->getMockBuilder(EntityHydrator::class)
                                  ->disableOriginalConstructor()
                                  ->getMock();

        $this->basicEntityPersister =
            new BasicEntityPersister($this->mapperMock, $this->classMetadataMock,
                                     $this->entityTrackerMock, $this->factoryMock);
    }

    /**
     * @covers ZohoBooksAL\Persister\BasicEntityPersister::load
     */
    public function testLoad()
    {
        $identifier = 1234;
        $data = ['name'=>'test', 'surname'=>'fem'];
        $entityName = 'entityName';

        $this->prepareMockForReturnCollectionPathAndCollectionItemName();
        $this->mapperMock->expects($this->once())->method('fetchOne')
                         ->with($this->equalTo($this->testCollectionPath),
                                $this->equalTo($this->testCollectionItemName),
                                $this->equalTo($identifier))
                         ->willReturn($data);

        $this->classMetadataMock
            ->expects($this->once())->method('getName')
            ->willReturn($entityName);

        $this->hydratorMock->expects($this->once())->method('hydrate')
                           ->with($this->equalTo($data), $this->equalTo($this->entityMock))
                           ->willReturn($this->entityMock);

        $this->hydratorMock->expects($this->once())
                           ->method('extract')
                           ->with($this->equalTo($this->entityMock))
                           ->willReturn($data);

        $this->factoryMock->expects($this->exactly(2))->method('make')
                          ->withConsecutive([$this->equalTo(EntityHydrator::class),
                                             $this->equalTo(['metadata'=>$this->classMetadataMock])],
                                             [$this->equalTo($entityName)])
                          ->willReturnOnConsecutiveCalls($this->hydratorMock, $this->entityMock);


        $this->entityTrackerMock->expects($this->once())
                                ->method('track')->with($this->equalTo($this->entityMock),
                                                        $this->equalTo($data));

        $this->assertEquals($this->entityMock,
                            $this->basicEntityPersister->load($identifier));
    }

    /**
     * @covers ZohoBooksAL\Persister\BasicEntityPersister::load
     */
    public function testLoadWithNullReturn()
    {
        $identifier = 1234;

        $this->prepareMockForReturnCollectionPathAndCollectionItemName();

        $this->mapperMock->expects($this->once())->method('fetchOne')
             ->with($this->equalTo($this->testCollectionPath),
                    $this->equalTo($this->testCollectionItemName),
                    $this->equalTo($identifier))
             ->willReturn(null);

        $this->assertNull($this->basicEntityPersister->load($identifier));
    }

    /**
     * @covers ZohoBooksAL\Persister\BasicEntityPersister::save
     */
    public function testSaveNew()
    {
        $values = ['test'=>1234];
        $testItem = ['item'];

        $this->prepareMockForReturnCollectionPathAndCollectionItemName();

        $this->entityTrackerMock
             ->expects($this->once())->method('isNew')
             ->with($this->equalTo($this->entityMock))
             ->willReturn(true);

        $this->factoryMock->expects($this->once())->method('make')
             ->with($this->equalTo(EntityHydrator::class),
                    $this->equalTo(['metadata'=>$this->classMetadataMock]))
             ->willReturn($this->hydratorMock);

        $this->hydratorMock->expects($this->exactly(2))->method('extract')
                           ->with($this->equalTo($this->entityMock))
                           ->willReturn($values);

        $this->mapperMock->expects($this->once())->method('create')
                         ->with($this->equalTo($this->testCollectionPath),
                                $this->equalTo($this->testCollectionItemName),
                                $this->equalTo($values))
                         ->willReturn($testItem);

        $this->hydratorMock->expects($this->once())
                           ->method('hydrate')
                           ->with($this->equalTo($testItem),
                                  $this->equalTo($this->entityMock));

        $this->entityTrackerMock
             ->expects($this->once())->method('track')
             ->with($this->equalTo($this->entityMock), $values);

        $this->basicEntityPersister->save($this->entityMock);
    }

    /**
     * @covers ZohoBooksAL\Persister\BasicEntityPersister::save
     */
    public function testSaveOnlyChangedDiff()
    {
        $primaryField = 'id';
        $testChangedName = 'testChanged';
        $values = [$primaryField=>1234, 'name'=>'test', 'surname'=>'fem'];
        $changedValues = [$primaryField=>1234, 'name'=>$testChangedName, 'surname'=>'fem'];
        $diffValues = ['name'=>$testChangedName];
        $testItem = ['item'];

        $this->entityTrackerMock->expects($this->once())
                                ->method('getEntitiesDiff')
                                ->with($this->equalTo($this->entityMock),
                                       $this->equalTo($changedValues))
                                ->willReturn($diffValues);

        $this->hydratorMock->expects($this->exactly(2))
                           ->method('extract')
                           ->with($this->equalTo($this->entityMock))
                           ->willReturn($changedValues);

        $this->factoryMock->expects($this->once())
                          ->method('make')
                          ->with($this->equalTo(EntityHydrator::class),
                              $this->equalTo(['metadata'=>$this->classMetadataMock]))
                          ->willReturn($this->hydratorMock);

        $this->prepareMockForReturnCollectionPathAndCollectionItemName();


        $secondClassMetadata = $this->getMockBuilder('ZohoBooksAL\Metadata\ClassMetadata')
                                    ->disableOriginalConstructor()
                                    ->setMethods(['getField'])
                                    ->getMock();

        $secondClassMetadata->expects($this->once())
                            ->method('getField')
                            ->willReturn($primaryField);

        $this->classMetadataMock->expects($this->once())
             ->method('getPrimary')
             ->willReturn($secondClassMetadata);

        
        $this->mapperMock->expects($this->once())->method('update')
                         ->with($this->equalTo($this->testCollectionPath),
                                $this->equalTo($this->testCollectionItemName),
                                $this->equalTo($values[$primaryField]),
                                $this->equalTo($diffValues))
                         ->willReturn($testItem);

        $this->hydratorMock->expects($this->once())->method('hydrate')
                           ->with($this->equalTo($testItem),
                                  $this->equalTo($this->entityMock));

        $this->entityTrackerMock
             ->expects($this->once())->method('track')
             ->with($this->equalTo($this->entityMock), $changedValues);

        $this->basicEntityPersister->save($this->entityMock);
    }

    protected function prepareMockForReturnCollectionPathAndCollectionItemName()
    {
        $this->classMetadataMock->expects($this->once())
                                ->method('getServiceCollectionPath')
                                ->willReturn($this->testCollectionPath);

        $this->classMetadataMock->expects($this->once())
                                ->method('getServiceCollectionItemName')
                                ->willReturn($this->testCollectionItemName);
    }

    /**
     * @param array $values
     * @param array $changedValues
     */
    protected function prepareMockEnvironmentForSaveDiff($values, $changedValues, $diff)
    {
        $primaryField = 'id';

        $values[$primaryField] = 1234;
        $changedValues[$primaryField] = 1234;

        $this->entityTrackerMock->expects($this->once())
             ->method('getEntitiesDiff')
             ->with($this->equalTo($this->entityMock),
                    $changedValues)
             ->willReturn($diff);

        $this->hydratorMock->expects($this->once())
            ->method('extract')
            ->with($this->equalTo($this->entityMock))
            ->willReturn($changedValues);

        $this->factoryMock->expects($this->once())
            ->method('make')
            ->with($this->equalTo(EntityHydrator::class),
                   $this->equalTo(['metadata'=>$this->classMetadataMock]))
            ->willReturn($this->hydratorMock);
    }

    /**
     * @covers ZohoBooksAL\Persister\BasicEntityPersister::save
     */
    public function testNotSaveIfNothingChangedAndDiffIsEmpty()
    {
       $values = ['name'=>'test', 'surname'=>'fem'];
       $changedValues = $values;

       $this->entityTrackerMock->expects($this->once())
                               ->method('getEntitiesDiff')
                               ->with($this->equalTo($this->entityMock),
                                      $this->equalTo($changedValues))
                                ->willReturn(false);

       $this->hydratorMock->expects($this->once())
                          ->method('extract')
                          ->with($this->equalTo($this->entityMock))
                          ->willReturn($changedValues);

       $this->factoryMock->expects($this->once())
                         ->method('make')
                         ->with($this->equalTo(EntityHydrator::class),
                                $this->equalTo(['metadata'=>$this->classMetadataMock]))
                         ->willReturn($this->hydratorMock);

       $this->basicEntityPersister->save($this->entityMock);
    }

    /**
     * @covers ZohoBooksAL\Persister\BasicEntityPersister::loadAll
     */
    public function testLoadAll()
    {
        $testParams = [];
        $testOffset = null;
        $testLimit = null;
        $entityName = 'entityName';
        $testItems = [[], []];

        $this->prepareMockForReturnCollectionPathAndCollectionItemName();

        $this->mapperMock->expects($this->once())->method('fetchAll')
             ->with($this->equalTo($this->testCollectionPath),
                    $this->equalTo($this->testCollectionItemName),
                    $this->equalTo($testParams),
                    $this->equalTo($testOffset),
                    $this->equalTo($testLimit))
             ->willReturn($testItems);

        $this->classMetadataMock->expects($this->once())
             ->method('getName')->willReturn($entityName);

        $this->factoryMock->expects($this->at(0))->method('make')
                          ->with($this->equalTo(EntityHydrator::class),
                                 $this->equalTo(['metadata' => $this->classMetadataMock]))
                          ->willReturn($this->hydratorMock);

        $this->factoryMock->expects($this->at(1))->method('make')
                          ->with($this->equalTo($entityName))
                          ->willReturn($this->entityMock);

        $this->factoryMock->expects($this->at(2))->method('make')
                          ->with($this->equalTo(EntityHydrator::class),
                                 $this->equalTo(['metadata' => $this->classMetadataMock]))
                          ->willReturn($this->hydratorMock);

        $this->factoryMock->expects($this->at(3))->method('make')
                          ->with($this->equalTo($entityName))
                          ->willReturn($this->entityMock);

        $this->hydratorMock->expects($this->exactly(2))
                           ->method('hydrate')
                           ->withConsecutive([$this->equalTo($testItems[0]), $this->equalTo($this->entityMock)],
                                             [$this->equalTo($testItems[1]), $this->equalTo($this->entityMock)])
                           ->willReturnOnConsecutiveCalls($this->entityMock, $this->entityMock);

        $this->entityTrackerMock
             ->expects($this->exactly(2))
             ->method('track')
             ->withConsecutive([$this->equalTo($this->entityMock), $this->equalTo($testItems[0])],
                               [$this->equalTo($this->entityMock), $this->equalTo($testItems[1])]);

        $this->assertCount(2, $this->basicEntityPersister->loadAll($testParams, $testOffset, $testLimit));
    }
}
